import{_ as e,c as a,o as i,a as t}from"./app.bc5544b3.js";const w='{"title":"Creating UI in Sapiens","description":"","frontmatter":{},"headers":[{"level":2,"title":"Getting Started","slug":"getting-started"},{"level":2,"title":"View","slug":"view"},{"level":2,"title":"Model View","slug":"model-view"}],"relativePath":"docs/creating-ui.md","lastUpdated":1654509416000}',d={name:"docs/creating-ui.md"},o=t('<h1 id="creating-ui-in-sapiens" tabindex="-1">Creating UI in Sapiens <a class="header-anchor" href="#creating-ui-in-sapiens" aria-hidden="true">#</a></h1><p>UI in Sapiens relies on a few different things. This page will somewhat just introduce the vocabulary, and show a quick example.</p><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h2><p>To get started, you should start with an entry point that contains UI that you can hook into, for example the <code>gameUI</code>.</p><p>Then, you can start your view: <code>mainView = View.new(gameUI.view)</code>. Every time you create a new View, pass in your parent view as the first argument.</p><p><code>Note:</code> <code>View</code> and other kinds of Views such as <code>ImageView</code> are not defined in lua. Just use them.</p><p>On each view you can set fields such as:</p><ul><li><code>Hidden</code> : <code>bool</code></li><li><code>RelativePosition</code>: <code>ViewPosition</code></li><li><code>size</code> : <code>vec2</code></li></ul><h1 id="ui-types" tabindex="-1">UI Types <a class="header-anchor" href="#ui-types" aria-hidden="true">#</a></h1><h2 id="view" tabindex="-1">View <a class="header-anchor" href="#view" aria-hidden="true">#</a></h2><p>Blank slate, like <code>div</code></p><h2 id="model-view" tabindex="-1">Model View <a class="header-anchor" href="#model-view" aria-hidden="true">#</a></h2><p>Render a model. Useful for creating background plates.</p>',13),n=[o];function s(r,c,l,h,u,p){return i(),a("div",null,n)}var _=e(d,[["render",s]]);export{w as __pageData,_ as default};
