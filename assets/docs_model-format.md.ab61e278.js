import{_ as e,c as a,o as t,a as o}from"./app.72b3dc46.js";var i="/sapiens-modding-wiki/assets/example.b4e28843.png";const g=JSON.parse('{"title":"Model Format","description":"","frontmatter":{},"headers":[{"level":3,"title":"Importing Models","slug":"importing-models"},{"level":3,"title":"Understanding the Format","slug":"understanding-the-format"},{"level":3,"title":"Per-Model empties","slug":"per-model-empties"},{"level":2,"title":"Known Empties","slug":"known-empties"},{"level":3,"title":"pathNodeboxn","slug":"pathnode-box-n"},{"level":3,"title":"bounding_radius","slug":"bounding-radius"},{"level":3,"title":"static_box","slug":"static-box"},{"level":3,"title":"placeCollide_n (box/sphere)","slug":"placecollide-n-box-sphere"},{"level":3,"title":"rayTestLimitsboxn","slug":"raytestlimits-box-n"}],"relativePath":"docs/model-format.md","lastUpdated":1655891994000}'),n={name:"docs/model-format.md"},d=o('<h1 id="model-format" tabindex="-1">Model Format <a class="header-anchor" href="#model-format" aria-hidden="true">#</a></h1><h3 id="importing-models" tabindex="-1">Importing Models <a class="header-anchor" href="#importing-models" aria-hidden="true">#</a></h3><p>In Sapiens, <code>.glb</code> models can be found inside of <code>GameResources/models</code>. These can be imported into blender using <code>file -&gt; import -&gt; glTF 2.0</code>.</p><h3 id="understanding-the-format" tabindex="-1">Understanding the Format <a class="header-anchor" href="#understanding-the-format" aria-hidden="true">#</a></h3><p>Sapiens models are generally made up of standard geometry, paired with &#39;meta data&#39;, represented via empties. You can <a href="/sapiens-modding-wiki/docs/materials.html">learn how materials work here.</a>.</p><p><img src="'+i+'" alt=""></p><h3 id="per-model-empties" tabindex="-1">Per-Model empties <a class="header-anchor" href="#per-model-empties" aria-hidden="true">#</a></h3><p>Some empties are per-model, and are used directly by dave for logic. They aren&#39;t required for all models.</p><p>For example, <code>coconutTree</code> contains empties <code>coconut_1</code> through <code>coconut_4</code>. These are used to position the <code>coconut</code> model in-game.</p><h2 id="known-empties" tabindex="-1">Known Empties <a class="header-anchor" href="#known-empties" aria-hidden="true">#</a></h2><p>This section will explain a list of known empties, and their effects.</p><h3 id="pathnode-box-n" tabindex="-1">pathNode_box_n <a class="header-anchor" href="#pathnode-box-n" aria-hidden="true">#</a></h3><p>These empties are used to provide pathfinding information to the Sapiens navigation server. Semantics are unknown.</p><h3 id="bounding-radius" tabindex="-1">bounding_radius <a class="header-anchor" href="#bounding-radius" aria-hidden="true">#</a></h3><p>This empty is used to provide a bounding box for your model. Semantics are unknown.</p><h3 id="static-box" tabindex="-1">static_box <a class="header-anchor" href="#static-box" aria-hidden="true">#</a></h3><p>Unknown</p><h3 id="placecollide-n-box-sphere" tabindex="-1">placeCollide_n (box/sphere) <a class="header-anchor" href="#placecollide-n-box-sphere" aria-hidden="true">#</a></h3><p>Unknown</p><h3 id="raytestlimits-box-n" tabindex="-1">rayTestLimits_box_n <a class="header-anchor" href="#raytestlimits-box-n" aria-hidden="true">#</a></h3><p>Unknown</p>',21),r=[d];function s(l,h,p,c,m,u){return t(),a("div",null,r)}var _=e(n,[["render",s]]);export{g as __pageData,_ as default};
