import{_ as e,c as a,o as t,a as r}from"./app.72b3dc46.js";const p=JSON.parse('{"title":"Thread Management","description":"","frontmatter":{},"headers":[{"level":2,"title":"Communication across Threads","slug":"communication-across-threads"}],"relativePath":"docs/thread-management.md","lastUpdated":1654509416000}'),o={name:"docs/thread-management.md"},c=r('<h1 id="thread-management" tabindex="-1">Thread Management <a class="header-anchor" href="#thread-management" aria-hidden="true">#</a></h1><p>Sapiens uses multiple threads to manage tasks. These threads are more or less reflected in the folder structure of the Lua code. Most importantly, there is a <code>server</code> and a <code>mainThread</code> (client).</p><h2 id="communication-across-threads" tabindex="-1">Communication across Threads <a class="header-anchor" href="#communication-across-threads" aria-hidden="true">#</a></h2><p>Sapiens has an RPC-like structure for elevating client calls to the server, and for server calls to be multicast to the clients.</p><ul><li><code>server:registerNetFunction</code> can be called on the <code>server</code> to make a server function available to the <code>mainThread</code></li><li><code>server:callClientFunction</code> can be called on the <code>server</code> to propagate a server call to the <code>mainThread</code></li><li><code>logicInterface:callServerFunction</code> can be called on the <code>mainThread</code> to fire a function on the <code>server</code>, assuming <code>registerNetFunction</code> is setup.</li></ul>',5),n=[c];function s(d,i,l,h,m,u){return t(),a("div",null,n)}var f=e(o,[["render",s]]);export{p as __pageData,f as default};
